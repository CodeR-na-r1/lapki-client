{
  "platform": {
    "ArduinoUno": {
      "name": "Arduino Uno",
      "components": {
        "Button": {
          "description": "Hardware Abstraction for Buttons. It provides an easy way of handling buttons.",
          "img": "arduino/switch.svg",
          "signals": {
            "isPressed": {
              "img": "arduino/button-1.svg",
              "description": "Return true if the button has been pressed"
            },
            "clicked": {
              "img": "arduino/button.svg",
              "description": "Return > 0 if the button is clicked, or 0 if not."
            }
          },
          "parameters": {
            "pin": {
              "img": "",
              "type": "uint8_t",
              "description": "sets the pin that this switch is connected to"
            },
            "buttonMode": {
              "img": "",
              "type": "uint8_t",
              "description": "buttonMode indicates BUTTON_PULLUP or BUTTON_PULLDOWN resistor"
            }
          },
          "variables": {
            "value": {
              "img": "",
              "type": "int",
              "description": "Текущее значение на пине"
            }
          },
          "methods": {},
          "singletone": false
        },

        "LED": {
          "description": "Hardware Abstraction for LEDs. It provides an easy way of handling LEDs.",
          "img": "arduino/led.svg",
          "signals": {},
          "parameters": {
            "pin": {
              "img": "",
              "type": "uint8_t",
              "description": "pin - the pin connected to this LED"
            }
          },
          "variables": {
            "value": {
              "img": "",
              "type": "int",
              "description": "Текущее значение на пине"
            }
          },
          "methods": {
            "on": {
              "img": "arduino/switch-on.svg",
              "description": "Set this LED on"
            },
            "off": {
              "img": "arduino/switch-off.svg",
              "description": "Set this LED off"
            },
            "toggle": {
              "img": "arduino/switch.svg",
              "description": "It will change state from on to off, or off to on"
            },
            "blink": {
              "img": "",
              "parameters": [
                {
                  "name": "time",
                  "type": "unsigned int",
                  "description": "the time each blink will take"
                },
                {
                  "name": "interval",
                  "type": "byte",
                  "description": "times the number of blinks"
                }
              ],
              "description": "Bling this led a number of times, with the duration of time each blink"
            },
            "setValue": {
              "img": "",
              "parameters": [
                {
                  "name": "val",
                  "type": "byte",
                  "description": "val the value to set the LED to [0,255]"
                }
              ],
              "description": "analogWrites the pin if PWM, else it either turn it on or off"
            }
          },
          "singletone": false
        },

        "Timer": {
          "description": "Программный таймер.",
          "img": "arduino/timer.svg",
          "signals": {
            "timeout": {
              "img": "arduino/timeout.svg",
              "description": "Время вышло!"
            }
          },
          "parameters": {},
          "methods": {
            "reset": {
              "img": "arduino/reset.svg",
              "description": "Сбросить таймер, отчет начнется сначала"
            },
            "disable": {
              "img": "arduino/timer-stop.svg",
              "description": "Отключить таймер."
            },
            "enable": {
              "img": "arduino/timer-start.svg",
              "description": "Включить таймер."
            },
            "start": {
              "img": "arduino/start.svg",
              "parameters": [
                {
                  "name": "interval",
                  "type": "unsigned long",
                  "description": "Интервал срабатывания."
                }
              ],
              "description": "Запустить таймер. Будет сигнал раз в интервал."
            }
          },
          "singletone": false,
          "variables": {
            "difference": {
              "img": "arduino/difference.svg",
              "type": "unsigned long",
              "description": "Оставшееся время до окончания таймера."
            }
          }
        },
        "Counter": {
          "description": "Переменная-счетчик.",
          "img": "arduino/counter.svg",
          "signals": {
            "isEqual": {
              "img": "",
              "description": "Издать сигнал, если значение счетчика равно value",
              "parameters": [
                {
                  "name": "Опорное значение",
                  "type": "int"
                }
              ]
            },
            "isLess": {
              "img": "",
              "description": "Издать сигнал, если значение счетчика меньше value",
              "parameters": [
                {
                  "name": "Опорное значение",
                  "type": "int"
                }
              ]
            },
            "isGreater": {
              "img": "",
              "description": "Издать сигнал, если значение счетчика больше value",
              "parameters": [
                {
                  "name": "Опорное значение",
                  "type": "int"
                }
              ]
            }
          },
          "parameters": {},
          "methods": {
            "add": {
              "img": "",
              "description": "Добавить value к значению счетчика",
              "parameters": [
                {
                  "name": "N",
                  "type": "int"
                }
              ]
            },
            "sub": {
              "img": "",
              "description": "Вычесть value к значению счетчика",
              "parameters": [
                {
                  "name": "N",
                  "type": "int"
                }
              ]
            },
            "reset": {
              "img": "",
              "description": "Обнулить значение счетчика."
            }
          },
          "variables": {
            "value": {
              "img": "",
              "description": "Текущее значение счетчика",
              "type": "int"
            }
          },

          "singletone": false
        },
        "QHsmSerial": {
          "description": "Класс-надстройка над Serial. Вызывает сигналы при получении данных.",
          "img": "",
          "signals": {
            "noByteReceived": {
              "img": "",
              "description": "Был вызван read, но данные не были получены"
            },
            "byteReceived": {
              "img": "",
              "description": "Были получены данные"
            }
          },
          "parameters": {
            "baud": {
              "img": "",
              "description": "Установить частоту работы Serial",
              "type": "unsigned long"
            }
          },
          "methods": {
            "println": {
              "img": "",
              "description": "Вывести данные в Serial монитор с добавлением \\n в конце",
              "parameters": [
                {
                  "name": "Данные для вывода",
                  "type": "int | char[]"
                }
              ]
            },
            "print": {
              "img": "",
              "description": "Вывести данные в Serial монитор с добавлением.",
              "parameters": [
                {
                  "name": "Данные для вывода",
                  "type": "int | char[]"
                }
              ]
            },
            "read": {
              "img": "",
              "description": "Запросить данные из Serial."
            }
          },
          "variables": {
            "lastByte": {
              "description": "Последний прочитанный байт.",
              "type": "int"
            }
          },
          "singletone": true
        },
        "PWM": {
          "description": "Класс, реализующий ШИМ",
          "img": "",
          "signals": {},
          "parameters": {
            "pin": {
              "img": "",
              "type": "uint8_t",
              "description": "Пин, на котором будет установлен ШИМ"
            }
          },
          "methods": {
            "write": {
              "img": "",
              "parameters": [
                {
                  "name": "Значение",
                  "type": "int"
                }
              ],
              "description": "Установить значение на ШИМ"
            }
          },
          "variables": {},
          "singletone": false
        },

        "DigitalOut": {
          "description": "Класс для подачи LOW, HIGH на пин",
          "img": "",
          "signals": {},
          "parameters": {
            "pin": {
              "img": "",
              "type": "uint8_t",
              "description": "Пин, на который будет подаваться сигнал."
            }
          },
          "methods": {
            "low": {
              "img": "",
              "description": "Подать LOW на пин."
            },
            "high": {
              "img": "",
              "description": "Подать HIGH на пин."
            }
          },
          "variables": {},
          "singletone": false
        },

        "DigitalIn": {
          "description": "Класс для считывания сигнала с пина",
          "img": "",
          "signals": {
            "isChanged": {
              "img": "",
              "description": "Сигнал вызывается, когда меняется значение на пине."
            }
          },
          "parameters": {
            "pin": {
              "img": "",
              "type": "uint8_t",
              "description": "Пин, с которого будут считываться данные."
            }
          },
          "methods": {},
          "variables": {
            "value": {
              "img": "",
              "type": "int",
              "description": "Текущее значение на пине."
            }
          },
          "singletone": false
        },

        "AnalogOut": {
          "description": "Класс для установки значения на аналоговые пины",
          "img": "",
          "signals": {},
          "methods": {
            "write": {
              "img": "",
              "parameters": [
                {
                  "name": "Значение",
                  "type": "int"
                }
              ],
              "description": "Установить значение на аналоговый пин"
            }
          },
          "parameters": {},
          "variables": {},
          "singletone": false
        },

        "AnalogIn": {
          "description": "Класс для получения значения с аналогового пина",
          "img": "",
          "signals": {},
          "methods": {},
          "parameters": {
            "pin": {
              "img": "",
              "type": "uint8_t",
              "description": "Пин, с которого будут считываться данные."
            }
          },
          "variables": {
            "value": {
              "type": "int",
              "description": "Данные, считанные с аналогового пина"
            }
          },
          "singletone": false
        },

        "ShiftRegister": {
          "description": "Класс вывода байта информации на порт вход/выхода последовательно (побитно).",
          "img": "",
          "signals": {},
          "methods": {
            "shift": {
              "img": "",
              "description": "Выводит байт информации на порт вход/выхода последовательно (побитно).\nВывод может осуществляться как с первого (левого), так и с последнего (правого) бита. \nКаждый бит последовательно подается на заданный порт, после чего подается сигнал на синхронизирующий порт вход/выход, информируя о доступности к считыванию бита.",
              "parameters": [
                {
                  "name": "Выводимое значение",
                  "type": "int"
                }
              ]
            }
          },
          "parameters": {
            "dataPin": {
              "img": "",
              "type": "uint8_t",
              "description": "Пин вход/выхода, на который выводятся биты"
            },
            "clockPin": {
              "img": "",
              "type": "uint8_t",
              "description": "Пин по которому производится синхронизация "
            },
            "bitOrder": {
              "img": "",
              "type": "uint8_t",
              "description": "Порядок битов. MSBFIRST - первый бит самый значимый, LSBFIRST - последний"
            }
          },
          "variables": {},
          "singletone": false
        }
      }
    }
  }
}
